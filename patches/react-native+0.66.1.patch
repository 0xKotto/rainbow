diff --git a/node_modules/react-native/React/CoreModules/RCTAlertManager.mm b/node_modules/react-native/React/CoreModules/RCTAlertManager.mm
index e0f450e..0eeec5d 100644
--- a/node_modules/react-native/React/CoreModules/RCTAlertManager.mm
+++ b/node_modules/react-native/React/CoreModules/RCTAlertManager.mm
@@ -100,9 +100,31 @@ - (void)invalidate
     }
   }
 
-  RCTAlertController *alertController = [RCTAlertController alertControllerWithTitle:title
-                                                                             message:nil
-                                                                      preferredStyle:UIAlertControllerStyleAlert];
+
+  UIViewController *presentingController = RCTPresentedViewController();
+  if (presentingController == nil) {
+    RCTLogError(@"Tried to display alert view but there is no application window. args: %@", @{
+      @"title" : args.title() ?: [NSNull null],
+      @"message" : args.message() ?: [NSNull null],
+      @"buttons" : RCTConvertOptionalVecToArray(
+          args.buttons(),
+          ^id(id<NSObject> element) {
+            return element;
+          })
+          ?: [NSNull null],
+      @"type" : args.type() ?: [NSNull null],
+      @"defaultValue" : args.defaultValue() ?: [NSNull null],
+      @"cancelButtonKey" : args.cancelButtonKey() ?: [NSNull null],
+      @"destructiveButtonKey" : args.destructiveButtonKey() ?: [NSNull null],
+      @"keyboardType" : args.keyboardType() ?: [NSNull null],
+     });
+    return;
+  }
+
+  UIAlertController *alertController = [UIAlertController alertControllerWithTitle:title
+                                                                                message:nil
+                                                                         preferredStyle:UIAlertControllerStyleAlert];
+   
   switch (type) {
     case RCTAlertViewStylePlainTextInput: {
       [alertController addTextFieldWithConfigurationHandler:^(UITextField *textField) {
@@ -151,7 +173,7 @@ - (void)invalidate
     } else if ([buttonKey isEqualToString:destructiveButtonKey]) {
       buttonStyle = UIAlertActionStyleDestructive;
     }
-    __weak RCTAlertController *weakAlertController = alertController;
+    __weak UIAlertController *weakAlertController = alertController
     [alertController
         addAction:[UIAlertAction
                       actionWithTitle:buttonTitle
@@ -161,7 +183,7 @@ - (void)invalidate
                                   case RCTAlertViewStylePlainTextInput:
                                   case RCTAlertViewStyleSecureTextInput:
                                     callback(@[ buttonKey, [weakAlertController.textFields.firstObject text] ]);
-                                    [weakAlertController hide];
+                                  //  [weakAlertController hide];
                                     break;
                                   case RCTAlertViewStyleLoginAndPasswordInput: {
                                     NSDictionary<NSString *, NSString *> *loginCredentials = @{
@@ -169,12 +191,12 @@ - (void)invalidate
                                       @"password" : [weakAlertController.textFields.lastObject text]
                                     };
                                     callback(@[ buttonKey, loginCredentials ]);
-                                    [weakAlertController hide];
+                                    //[weakAlertController hide];
                                     break;
                                   }
                                   case RCTAlertViewStyleDefault:
                                     callback(@[ buttonKey ]);
-                                    [weakAlertController hide];
+                                   // [weakAlertController hide];
                                     break;
                                 }
                               }]];
@@ -186,7 +208,7 @@ - (void)invalidate
   [_alertControllers addObject:alertController];
 
   dispatch_async(dispatch_get_main_queue(), ^{
-    [alertController show:YES completion:nil];
+    [presentingController presentViewController:alertController animated:YES completion:nil];
   });
 }
 
diff --git a/node_modules/react-native/React/Views/RCTView.m b/node_modules/react-native/React/Views/RCTView.m
index c4b9a25..11a4800 100644
--- a/node_modules/react-native/React/Views/RCTView.m
+++ b/node_modules/react-native/React/Views/RCTView.m
@@ -809,6 +809,11 @@ - (void)displayLayer:(CALayer *)layer
     layer.backgroundColor = backgroundColor;
     layer.contents = nil;
     layer.needsDisplayOnBoundsChange = NO;
+    if (@available(iOS 13.0, *)) {
+      if (layer.cornerRadius < MIN(self.bounds.size.height, self.bounds.size.width) / 2) {
+        layer.cornerCurve = kCACornerCurveContinuous;
+      }
+    }
     layer.mask = nil;
     return;
   }
